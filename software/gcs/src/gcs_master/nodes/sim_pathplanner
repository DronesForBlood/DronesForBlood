#!/usr/bin/env python3
"""
Node that simulates the user link, requesting a new mission.
"""
# Standard libraries
import sys
# Third-party libraries
import rospy
import geometry_msgs.msg
import std_msgs.msg
# Local libraries
from gcs_master import drone_fsm
try:
    import mavlink_lora.msg
except ModuleNotFoundError:
    print("Mavlink module not found")


class PathplannerSimNode():

    def __init__(self):

        rospy.init_node("sim_pathplanner", anonymous=True)
        
        self.new_path_pub = rospy.Publisher(
                "pathplanner/mission_list",
                mavlink_lora.msg.mavlink_lora_mission_list,
                queue_size=1)

        rospy.Subscriber("gcs_master/calculate_path",
                        std_msgs.msg.Bool,
                        self.new_path_callback,
                        queue_size=1)

    def new_path_callback(self, data):
        if data.data:
            msg = mavlink_lora.msg.mavlink_lora_mission_list()

            # WAYPOINT 1
            way1 = mavlink_lora.msg.mavlink_lora_mission_item_int()
            way1.target_system = 0
            way1.target_component = 0
            way1.seq = 0
            way1.frame = 6 #global pos, relative alt_int
            way1.command = 16
            way1.param1 = 0 # hold time
            way1.param2 = 5 # acceptance radius in mmsg = mavlink_lora.msg.mavlink_lora_mission_list()
            way1.param3 = 0 # pass though waypoint, no trajectory control
            way1.x = int(55.4720010 * 10000000)
            way1.y = int(10.4164463 * 10000000)
            way1.z = 20
            way1.autocontinue = 1

            # WAYPOINT 2
            way2 = mavlink_lora.msg.mavlink_lora_mission_item_int()
            way2.target_system = 0
            way2.target_component = 0
            way2.seq = 1
            way2.frame = 6 #global pos, relative alt_int
            way2.command = 16
            way2.param1 = 0 # hold time
            way2.param2 = 5 # acceptance radius in m
            way2.param3 = 0 # pass though waypoint, no trajectory control
            way2.x = int(55.4720615 * 10000000)
            way2.y = int(10.4161885 * 10000000)
            way2.z = 40
            way2.autocontinue = 1

            # WAYPOINT 3
            way3 = mavlink_lora.msg.mavlink_lora_mission_item_int()
            way3.target_system = 0
            way3.target_component = 0
            way3.seq = 2
            way3.frame = 6 #global pos, relative alt_int
            way3.command = 16
            way3.param1 = 0 # hold time
            way3.param2 = 5 # acceptance radius in m
            way3.param3 = 0 # pass though waypoint, no trajectory control
            way3.x = int(55.4721370 * 10000000)
            way3.y = int(10.4164410 * 10000000)
            way3.z = 30
            way3.autocontinue = 1

            msg.waypoints.append(way1)
            msg.waypoints.append(way2)
            msg.waypoints.append(way3)

            rospy.loginfo("Publishing 3 waypoints")
            self.new_path_pub.publish(msg)
        return

    def main(self):
        rospy.spin()

if __name__ == "__main__":
    pathplanner_node = PathplannerSimNode()
    pathplanner_node.main()
